{"version":3,"file":"static/js/484.ee1f4ebe.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesListItem/MoviesListItem.module.css?7daa","components/MoviesListItem/MoviesListItem.js","webpack://goit-react-hw-05-movies/./src/components/MoviesList/Movies.module.css?fddf","components/MoviesList/MoviesList.js","services/film-library-api.js","services/getStateMachineStatus.js","views/MoviesView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviesListItem_item__8ninL\",\"link\":\"MoviesListItem_link__+HfrG\"};","import PropTypes from 'prop-types';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './MoviesListItem.module.css';\r\n\r\nfunction MoviesListItem({ title, id, url = \"/movies\", location }) {\r\n    return (\r\n        <li className={s.item}>\r\n            <NavLink\r\n                to={{\r\n                    pathname: `${url}/${id}`,\r\n                    state: {from: location}\r\n                }}\r\n                className={s.link}>\r\n                {title}\r\n            </NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nMoviesListItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    url: PropTypes.string,\r\n    location: PropTypes.shape().isRequired\r\n}\r\n\r\nexport default MoviesListItem;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Movies_list__JsH32\"};","import PropTypes from \"prop-types\";\r\nimport MoviesListItem from \"../MoviesListItem/MoviesListItem\";\r\nimport s from \"./Movies.module.css\"\r\n\r\nfunction MoviesList({movies, url, location}) {\r\n    return (\r\n        <ul className={s.list}>\r\n            {movies.map(({id, title}) => {\r\n                return <MoviesListItem key={id} title={title} id={id} url={url} location={location}/>\r\n            })}\r\n        </ul> \r\n   ) \r\n}\r\n\r\nMoviesList.propTypes = {\r\n    movies: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired\r\n    }))\r\n}\r\n\r\nexport default MoviesList;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c7ed46652640bc5a91d5a4e73d915c28';\n\nasync function fetchWithErrorHandling(url = '', ) {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopularMovies() {\n  return fetchWithErrorHandling(`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=1`);\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n}\n\nexport function fetchMoviesCast(movieId) {\n  return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n}\n\nexport function fetchMoviesReviews(movieId) {\n  return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n}\n","function getStateMachineStatus() {\r\n    return {\r\n        IDLE: 'idle',\r\n        PENDING: 'pending',\r\n        REJECT: 'reject',\r\n        RESOLVE: 'resolve'\r\n    }\r\n}\r\n\r\nexport default getStateMachineStatus;","import { useState, useEffect } from \"react\";\r\nimport { useRouteMatch, useHistory, useLocation } from \"react-router-dom\";\r\nimport Loader from \"../components/Loader\";\r\nimport MoviesList from \"../components/MoviesList\";\r\nimport * as filmLibraryApi from \"../services/film-library-api\";\r\nimport getStateMachineStatus from '../services/getStateMachineStatus';\r\n\r\nconst STATUS = getStateMachineStatus();\r\n\r\nexport default function MoviesView() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const { url } = useRouteMatch();\r\n  const selectedQuery = new URLSearchParams(location.search).get('query');\r\n  const [value, setValue] = useState('');\r\n  const [query, setQuery] = useState(selectedQuery ?? '');\r\n  const [error, setError] = useState('');\r\n  const [movies, setMovies] = useState([]);\r\n  const [status, setStatus] = useState(STATUS.IDLE);\r\n\r\n  useEffect(() => {\r\n    if (query === '') {\r\n      return\r\n    }\r\n\r\n    setStatus(STATUS.PENDING);\r\n\r\n    filmLibraryApi.fetchSearchMovies(query)\r\n      .then(({ results }) => {\r\n        if (results.length === 0) {\r\n          return Promise.reject(new Error('Not found'))\r\n        }\r\n        \r\n        setMovies(results.map(({ id, title }) => ({ id, title })));\r\n        setStatus(STATUS.RESOLVE);\r\n        history.push({\r\n        // ...location,\r\n        search: `?query=${query}`\r\n        })\r\n      })\r\n      .catch(error => {\r\n        setError(error.message);\r\n        \r\n        setStatus(STATUS.REJECT);\r\n      })\r\n  }, [history, query]);\r\n\r\n  const handleChange = e => {\r\n    setValue(e.currentTarget.value.toLowerCase().trim())\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (value === '') {\r\n      return alert(\"Enter something!\")\r\n    }\r\n\r\n    setQuery(value)\r\n    \r\n    setValue('')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input onChange={handleChange} value={value}/>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      \r\n      {status === STATUS.REJECT && <h2>{error}</h2>}\r\n      {status === STATUS.RESOLVE &&\r\n        <MoviesList\r\n          movies={movies}\r\n          url={url}\r\n          location={location}\r\n        />\r\n      }\r\n      {status === STATUS.PENDING && <Loader/>}\r\n    </>\r\n  );\r\n}"],"names":["title","id","url","location","className","s","to","pathname","state","from","movies","map","BASE_URL","API_KEY","fetchWithErrorHandling","fetch","response","ok","json","Promise","reject","Error","fetchPopularMovies","fetchSearchMovies","query","fetchMovieById","movieId","fetchMoviesCast","fetchMoviesReviews","IDLE","PENDING","REJECT","RESOLVE","STATUS","getStateMachineStatus","MoviesView","history","useHistory","useLocation","useRouteMatch","selectedQuery","URLSearchParams","search","get","useState","value","setValue","setQuery","error","setError","setMovies","status","setStatus","useEffect","filmLibraryApi","then","results","length","push","catch","message","onSubmit","e","preventDefault","alert","onChange","currentTarget","toLowerCase","trim","type"],"sourceRoot":""}